# extract relevant chromsomes
vcftools --vcf freebayes.SNPs.filtered.final.maf005.recode.vcf \
--chr scf7180002389883 \
--chr scf7180002389442 \
--chr scf7180002346674 \
--chr scf7180002348625 \
--chr scf7180002347780 \
--chr scf7180002389605 \
--chr scf7180002378143 \
--chr scf7180002342864 \
--chr scf7180002353023 \
--chr scf7180002378669 \
--chr scf7180002351444 \
--recode --out test

# remove "scf" in chromosome name
awk '{gsub(/^scf/,""); print}' test.recode.vcf > tmp.vcf 

# create AR and SM subset
vcftools --vcf tmp.vcf --keep ../pop/AR --recode --out freebayes.SNPs.filtered.final.maf005.AR
vcftools --vcf tmp.vcf --keep ../pop/SM --recode --out freebayes.SNPs.filtered.final.maf005.SM

# create input using SNPfiltered SNPs and MAF > 5%
vcf-query freebayes.SNPs.filtered.final.maf005.AR.recode.vcf -f '%CHROM\t%POS\t%REF\t[%GT]\n' | awk '{gsub ( "/","" ) ; print $0 }' >AR.popdata
vcf-query freebayes.SNPs.filtered.final.maf005.SM.recode.vcf -f '%CHROM\t%POS\t%REF\t[%GT]\n' | awk '{gsub ( "/","" ) ; print $0 }' >SM.popdata

# copy AR.popdata and SM.popdata to software directory...start IBS
scp SM.popdata ~/software/Inferring-demography-from-IBS
scp AR.popdata ~/software/Inferring-demography-from-IBS

cd ~/software/Inferring-demography-from-IBS

#within each pop
python compatibilize_hapfiles.py AR SM
python parse_within_pop_allpairs.py AR None 1
python parse_within_pop_allpairs.py SM None 1

python infer_onepop_cumulative.py AR_lengths.ibs 100 5 2
python infer_onepop_cumulative.py SM_lengths.ibs 100 5 2


# example data
python parse_within_pop_allpairs.py example_input_data/CEU None 1
python infer_onepop_cumulative.py example_input_data/CEU_lengths.ibs 100 5 30



# dadi
# use python script from 
# https://github.com/mscharmann/python/blob/f0453609fc2112a48f6424f9cfa2ae094d94086b/vcf_to_dadi.py

python test3.py --popmap popmap.txt --vcf freebayes.SNPs.filtered.final.maf005.recode.vcf
